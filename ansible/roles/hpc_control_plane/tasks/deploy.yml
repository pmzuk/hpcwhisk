- name: ensure images directory is created with permissions
  file:
    path: "{{ deploy_dir }}/images"
    state: directory
    mode: 0770

- name: Copy zookeeper image
  copy:
    dest: "{{ deploy_dir}}/images"
    src: "{{ openwhisk_home }}/ansible/roles/hpc_control_plane/files/zookeeper.simg"
    group: "{{ deploy_group }}"
    force: false
- name: Copy kafka image
  copy:
    dest: "{{ deploy_dir}}/images"
    src: "{{ openwhisk_home }}/ansible/roles/hpc_control_plane/files/kafka.simg"
    group: "{{ deploy_group }}"
    force: false
- name: Copy couchdb image
  copy:
    dest: "{{ deploy_dir}}/images"
    src: "{{ openwhisk_home }}/ansible/roles/hpc_control_plane/files/couchdb.simg"
    group: "{{ deploy_group }}"
    force: false


# Work-around group quota issues by deploying to TMPDIR and moving with proper permissions
- name: Create temp dir
  tempfile:
   state: directory
  register: control_plane_tmp

- name: Unpack controller distribution to temp dir
  unarchive:
    src: "{{ controller.archive }}"
    dest: "{{ control_plane_tmp.path }}"
    group: "{{ deploy_group }}"
    mode: 'g+w'

- name: Copy transformEnvironment
  copy:
    dest: "{{ control_plane_tmp.path }}/controller/bin"
    src: "{{ openwhisk_home }}/common/scala/transformEnvironment.sh"
    group: "{{ deploy_group }}"
    mode: 0770

#- name: Copy SLURM runner
#  template:
#    src: "init.sh.j2"
#    dest: "{{ control_plane_tmp.path }}/control_plane/bin/init.sh"
#    group: "{{ deploy_group }}"
#    mode: 0770
#
- name: Copy CouchDB runner
  template:
   src: "couchdb.sh.j2"
   dest: "{{ control_plane_tmp.path }}/controller/bin/couchdb.sh"
   group: "{{ deploy_group }}"
   mode: 0770
- name: Copy zookeeper runner
  template:
   src: "zookeeper.sh.j2"
   dest: "{{ control_plane_tmp.path }}/controller/bin/zookeeper.sh"
   group: "{{ deploy_group }}"
   mode: 0770
- name: Copy kafka runner
  template:
   src: "kafka.sh.j2"
   dest: "{{ control_plane_tmp.path }}/controller/bin/kafka.sh"
   group: "{{ deploy_group }}"
   mode: 0770
- name: Copy controller runner
  template:
   src: "start-controller.sh.j2"
   dest: "{{ control_plane_tmp.path }}/controller/bin/start-controller.sh"
   group: "{{ deploy_group }}"
   mode: 0770
- name: Copy init-all.sh
  template:
   src: "init-all.sh.j2"
   dest: "{{ control_plane_tmp.path }}/controller/bin/init-all.sh"
   group: "{{ deploy_group }}"
   mode: 0770

- name: Ensure control plane config directory is created with permissions
  file:
    path: "{{ control_plane_tmp.path }}/controller/conf"
    state: directory
    group: "{{ deploy_group }}"
    mode: 0770

- name: Ensure control plane log directory is created with permissions
  file:
    path: "{{ control_plane_tmp.path }}/controller/logs"
    group: "{{ deploy_group }}"
    state: directory
    mode: 0777

- name: "copy kafka truststore/keystore"
  when: kafka.protocol == 'SSL'
  copy:
    src: "{{ openwhisk_home }}/ansible/roles/kafka/files/{{ kafka.ssl.keystore.name }}"
    dest: "{{ control_plane_tmp.path }}/controller/conf"
    group: "{{ deploy_group }}"

- name: copy keystore, key and cert
  when: controller.protocol == "https"
  copy:
    src: "{{ inv_item }}"
    mode: 0666
    dest: "{{ control_plane_tmp.path }}/controller/conf"
    group: "{{ deploy_group }}"
  with_items:
  - "{{ openwhisk_home }}/ansible/roles/controller/files/{{ controller.ssl.keystore.name }}"
  - "{{ openwhisk_home }}/ansible/roles/controller/files/{{ controller.ssl.key }}"
  - "{{ openwhisk_home }}/ansible/roles/controller/files/{{ controller.ssl.cert }}"
  loop_control:
    loop_var: inv_item

- name: copy jmxremote password file
  when: jmx.enabled
  template:
    src: "jmxremote.password.j2"
    dest: "{{ control_plane_tmp.path }}/controller/conf/jmxremote.password"
    group: "{{ deploy_group }}"
    mode: 0770

- name: copy jmxremote access file
  when: jmx.enabled
  template:
    src: "jmxremote.access.j2"
    dest: "{{ control_plane_tmp.path }}/controller/conf/jmxremote.access"
    group: "{{ deploy_group }}"
    mode: 0770

- name: expose additional ports if jmxremote is enabled
  when: jmx.enabled
  vars:
    jmx_remote_port: "{{ jmx.basePortController }}"
    jmx_remote_rmi_port:
      "{{ jmx.rmiBasePortController }}"
  set_fact:
    controller_args: >-
      {{ controller.arguments }}
      {{ jmx.jvmCommonArgs }}
      -Djava.rmi.server.hostname={{ inventory_hostname }}
      -Dcom.sun.management.jmxremote.rmi.port={{ jmx_remote_rmi_port }}
      -Dcom.sun.management.jmxremote.port={{ jmx_remote_port }}


- name: Load config from template
  tags: ["test"]
  set_fact:
    openwhisk_config: "{{ lookup('template', '../controller/templates/config.j2') | b64encode }}"

- name: include controller data
  tags: ["test"]
  include_tasks: "../controller/tasks/env.yml"

- name: native controller env
  set_fact:
    native_env:
       "JAVA_OPTS": "-Xmx{{ controller.heap }} -XX:+CrashOnOutOfMemoryError -XX:+UseGCOverheadLimit -XX:ErrorFile={{ deploy_dir }}/logs/java_error.log"
       "CONFIG_whisk_kafka_common_sslTruststoreLocation": "{{ deploy_dir }}/conf/{{ kafka.ssl.keystore.name }}"
       "CONFIG_whisk_kafka_common_sslKeystoreLocation": "{{ deploy_dir }}/conf/{{ kafka.ssl.keystore.name }}"
       "CONFIG_whisk_controller_https_keystorePath": "{{ deploy_dir }}/conf/{{ controller.ssl.keystore.name }}"

- name: merge native control plane env
  set_fact:
     env: "{{ env | combine(native_env) }}"

- name: Write environment.sh
  template:
    src: environment.sh.j2
    dest: "{{ control_plane_tmp.path }}/controller/conf/environment.sh"
    group: "{{ deploy_group }}"
    mode: 0770

- name: Install control plane
  shell: "sg {{ deploy_group }} 'cp -r --preserve=all {{ control_plane_tmp.path }}/controller/* {{ deploy_dir }}'"

- name: Cleanup temp dir
  file:
    path: "{{ control_plane_tmp.path }}"
    state: absent

